{"remainingRequest":"E:\\demo\\pikaz-excel-js\\node_modules\\babel-loader\\lib\\index.js!E:\\demo\\pikaz-excel-js\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\demo\\pikaz-excel-js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\demo\\pikaz-excel-js\\src\\plugin\\excelExport\\excelExport.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\demo\\pikaz-excel-js\\src\\plugin\\excelExport\\excelExport.vue","mtime":1610165480628},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["excelExport.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\r\n * @Author: zouzheng\r\n * @Date: 2020-04-30 11:42:13\r\n * @LastEditors: zouzheng\r\n * @LastEditTime: 2020-08-10 23:10:18\r\n * @Description: 这是excel导出组件（页面）\r\n -->\r\n<template>\r\n  <div class=\"excel-export\" @click=\"!manual&&exportExcel()\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { saveAs } from 'file-saver'\r\nimport XLSX from 'pikaz-xlsx-style'\r\nexport default {\r\n  props: {\r\n    // 文件类型\r\n    bookType: {\r\n      type: String,\r\n      default: 'xlsx'\r\n    },\r\n    // 文件名\r\n    filename: {\r\n      type: String,\r\n      default: 'excel'\r\n    },\r\n    // 是否手动导出\r\n    manual: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 表格配置\r\n    sheet: {\r\n      type: Array,\r\n      default: () => {\r\n        return []\r\n      }\r\n    },\r\n    // 处理数据前\r\n    beforeStart: {\r\n      type: Function,\r\n      // bookType:文件类型,filename:文件名,sheet:表格数据\r\n      default: (bookType, filename, sheet) => { }\r\n    },\r\n    // 导出前\r\n    beforeExport: {\r\n      type: Function,\r\n      // filename:文件名,sheet:表格数据,blob:文件流\r\n      default: (bookType, filename, blob) => { }\r\n    },\r\n    // 导出错误\r\n    onError: {\r\n      type: Function,\r\n      // err:错误信息\r\n      default: (err) => { }\r\n    }\r\n  },\r\n  components: {},\r\n  data () {\r\n    return {\r\n      // 默认配置\r\n      default: {\r\n        sheetName: 'sheet',\r\n        globalStyle: {\r\n          border: {\r\n            top: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            },\r\n            bottom: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            },\r\n            left: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            },\r\n            right: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            }\r\n          },\r\n          font: {\r\n            name: '宋体',\r\n            sz: 12,\r\n            color: { rgb: \"000000\" },\r\n            bold: false,\r\n            italic: false,\r\n            underline: false,\r\n            shadow: false\r\n          },\r\n          alignment: {\r\n            horizontal: \"center\",\r\n            vertical: \"center\",\r\n            wrapText: false\r\n          },\r\n          fill: {\r\n            fgColor: { rgb: \"ffffff\" },\r\n          }\r\n        },\r\n      },\r\n      // 枚举类\r\n      enum: {\r\n        // 文件类型\r\n        bookType: ['xlsx', 'xls']\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n  },\r\n  mounted () {\r\n  },\r\n  methods: {\r\n    /**\r\n     * @name: 导出excel函数\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    pikaExportExcel () {\r\n      this.$nextTick(() => {\r\n        this.exportExcel()\r\n      })\r\n    },\r\n    /**\r\n     * @name:导出excel \r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    exportExcel () {\r\n      // 处理数据前\r\n      const beforeStart = this.beforeStart(this.bookType, this.filename, this.sheet)\r\n      if (beforeStart === false) {\r\n        return\r\n      }\r\n      if (!this.sheet || this.sheet.length <= 0) {\r\n        this.onError('Table data cannot be empty')\r\n        return\r\n      }\r\n      const wb = this.Workbook()\r\n      this.sheet.forEach((item, index) => {\r\n        let {\r\n          // 标题\r\n          title,\r\n          // 表头\r\n          tHeader,\r\n          // 多级表头\r\n          multiHeader,\r\n          // 表格数据\r\n          table,\r\n          // 合并项\r\n          merges,\r\n          // 数据键值\r\n          keys,\r\n          // 列宽\r\n          colWidth,\r\n          // 表名\r\n          sheetName,\r\n          // 全局样式\r\n          globalStyle,\r\n          // 单元格样式\r\n          cellStyle\r\n        } = item\r\n        sheetName = sheetName || this.default.sheetName\r\n        // 默认全局样式覆盖\r\n        const dgStyle = this.default.globalStyle\r\n        if (globalStyle) {\r\n          Object.keys(dgStyle).forEach(key => {\r\n            globalStyle[key] = { ...dgStyle[key], ...globalStyle[key] }\r\n          })\r\n        } else {\r\n          globalStyle = dgStyle\r\n        }\r\n        // 处理标题格式\r\n        if (title || title === 0 || title === '') {\r\n          // 取表头、多级表头中的最大值\r\n          const tHeaderLength = tHeader && tHeader.length || 0\r\n          const multiHeaderLength = multiHeader && Math.max(...multiHeader.map(m => m.length)) || 0\r\n          const titleLength = Math.max(tHeaderLength, multiHeaderLength, keys.length)\r\n          // 第一个元素为title，剩余以空字符串填充\r\n          title = [title].concat(Array(titleLength - 1).fill(''))\r\n          // 处理标题的合并\\\r\n          const cell=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\r\n          let mergeSecond='A1'\r\n          if(titleLength>26){\r\n             const one=parseInt(titleLength/26)\r\n             const two=titleLength%26\r\n             mergeSecond=cell[one-1]+cell[two-1]+'1'\r\n          }else{\r\n             mergeSecond = cell[titleLength-1]+'1'\r\n          }\r\n          const titleMerge = `A1:${mergeSecond}`\r\n          if (!merges) {\r\n            merges = [titleMerge]\r\n          } else {\r\n            if (merges.indexOf(titleMerge) === -1) {\r\n              merges.push(titleMerge)\r\n            }\r\n          }\r\n        }\r\n        //表头对应字段\r\n        let data = table.map(v => keys.map(j => v[j]))\r\n        // 多级表头\r\n        if (multiHeader) {\r\n          // 倒序循环\r\n          for (let i = multiHeader.length - 1; i >= 0; i--) {\r\n            data.unshift(multiHeader[i]);\r\n          }\r\n        }\r\n        tHeader && data.unshift(tHeader);\r\n        title && data.unshift(title);\r\n        const ws = this.sheet_from_array_of_arrays(data);\r\n        if (merges && merges.length > 0) {\r\n          if (!ws['!merges']) ws['!merges'] = [];\r\n          merges.forEach(merge => {\r\n            ws['!merges'].push(XLSX.utils.decode_range(merge))\r\n          })\r\n        }\r\n        // 如果没有列宽则自适应\r\n        if (!colWidth) {\r\n          // 基准比例，以12为标准\r\n          const benchmarkRate = globalStyle.font.sz && globalStyle.font.sz / 12 || 1\r\n          // 空字符长度\r\n          const nullstr = 10 * benchmarkRate + 2\r\n          // 单个中文字符长度\r\n          const chinese = 2 * benchmarkRate\r\n          // 单个非中文字符长度\r\n          const nChinese = benchmarkRate\r\n          //设置worksheet每列的最大宽度,并+2调整一点列宽\r\n          const sheetColWidth = data.map(row => row.map(val => {\r\n            //先判断是否为null/undefined\r\n            if (!val) {\r\n              return {\r\n                'wch': nullstr\r\n              };\r\n            } else {\r\n              const strArr = val.toString().split('')\r\n              const pattern = new RegExp(\"[\\u4E00-\\u9FA5]+\")\r\n              let re = strArr.map(str => {\r\n                // 是否为中文\r\n                if (pattern.test(str)) {\r\n                  return chinese\r\n                } else {\r\n                  return nChinese\r\n                }\r\n              })\r\n              re = re.reduce((total, r) => total + r, 0)\r\n              return {\r\n                'wch': re + 2\r\n              };\r\n            }\r\n          }))\r\n          /*以第一行为初始值*/\r\n          let result = sheetColWidth[0];\r\n          for (let i = 1; i < sheetColWidth.length; i++) {\r\n            for (let j = 0; j < sheetColWidth[i].length; j++) {\r\n              if (result[j]['wch'] < sheetColWidth[i][j]['wch']) {\r\n                result[j]['wch'] = sheetColWidth[i][j]['wch'];\r\n              }\r\n            }\r\n          }\r\n          ws['!cols'] = result;\r\n        } else {\r\n          ws['!cols'] = colWidth.map(i => {\r\n            return { wch: i }\r\n          })\r\n        }\r\n\r\n        // 添加工作表\r\n        wb.SheetNames.push(sheetName);\r\n        wb.Sheets[sheetName] = ws;\r\n        let dataInfo = wb.Sheets[wb.SheetNames[index]];\r\n\r\n        //全局样式\r\n        (function () {\r\n          Object.keys(dataInfo).forEach(i => {\r\n            if (i == '!ref' || i == '!merges' || i == '!cols') {\r\n            } else {\r\n              dataInfo[i.toString()].s = globalStyle;\r\n            }\r\n          });\r\n        })();\r\n\r\n        // 单个样式\r\n        (function () {\r\n          if (!cellStyle || cellStyle.length <= 0) {\r\n            return\r\n          }\r\n          cellStyle.forEach(s => {\r\n            const { border, font, alignment, fill } = s;\r\n            dataInfo[s.cell].s = {\r\n              border: border === {} ? border : border || globalStyle.border,\r\n              font: font || globalStyle.font,\r\n              alignment: alignment || globalStyle.alignment,\r\n              fill: fill || globalStyle.fill\r\n            }\r\n          });\r\n        })();\r\n      })\r\n      // 类型默认为xlsx\r\n      let bookType = this.enum.bookType.filter(i => i === this.bookType)[0] || this.enum.bookType[0];\r\n      this.writeExcel(wb, bookType, this.filename)\r\n    },\r\n    /**\r\n     * @name: workbook对象\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    Workbook () {\r\n      class WB {\r\n        constructor() {\r\n          this.SheetNames = [];\r\n          this.Sheets = {};\r\n        }\r\n      }\r\n      return new WB()\r\n    },\r\n    /**\r\n     * @name: 导出excel文件\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    writeExcel (wb, bookType, filename) {\r\n      const wbout = XLSX.write(wb, {\r\n        bookType: bookType,\r\n        bookSST: false,\r\n        type: 'binary'\r\n      });\r\n      const blob = new Blob([this.s2ab(wbout)], {\r\n        type: \"application/octet-stream\"\r\n      })\r\n      const beforeExport = this.beforeExport(blob, bookType, filename)\r\n      if (beforeExport === false) {\r\n        return\r\n      }\r\n      saveAs(blob, `${filename}.${bookType}`);\r\n    },\r\n    /**\r\n     * @name: 转化时间格式\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    datenum (v, date1904) {\r\n      if (date1904) v += 1462;\r\n      const epoch = Date.parse(v);\r\n      return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\r\n    },\r\n    /**\r\n     * @name: 设置数据类型\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    sheet_from_array_of_arrays (data, opts) {\r\n      let ws = {};\r\n      const range = {\r\n        s: {\r\n          c: 1000000000,\r\n          r: 1000000000\r\n        },\r\n        e: {\r\n          c: 0,\r\n          r: 0\r\n        }\r\n      };\r\n      for (let R = 0; R != data.length; ++R) {\r\n        for (let C = 0; C != data[R].length; ++C) {\r\n          if (range.s.r > R) range.s.r = R;\r\n          if (range.s.c > C) range.s.c = C;\r\n          if (range.e.r < R) range.e.r = R;\r\n          if (range.e.c < C) range.e.c = C;\r\n          let cell = {\r\n            v: data[R][C]\r\n          };\r\n          if (cell.v == null) continue;\r\n          let cell_ref = XLSX.utils.encode_cell({\r\n            c: C,\r\n            r: R\r\n          });\r\n\r\n          if (typeof cell.v === 'number') cell.t = 'n';\r\n          else if (typeof cell.v === 'boolean') cell.t = 'b';\r\n          else if (cell.v instanceof Date) {\r\n            cell.t = 'n';\r\n            cell.z = XLSX.SSF._table[14];\r\n            cell.v = this.datenum(cell.v);\r\n          } else cell.t = 's';\r\n\r\n          ws[cell_ref] = cell;\r\n        }\r\n      }\r\n      if (range.s.c < 1000000000) ws['!ref'] = XLSX.utils.encode_range(range);\r\n      return ws;\r\n    },\r\n\r\n    /**\r\n     * @name: 转换格式\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    s2ab (s) {\r\n      const b = new ArrayBuffer(s.length);\r\n      const v = new Uint8Array(b);\r\n      for (let i = 0; i < s.length; i++) {\r\n        v[i] = s.charCodeAt(i) & 0xFF\r\n      }\r\n      return b;\r\n    }\r\n  },\r\n  computed: {},\r\n  watch: {},\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>"],"sourceRoot":"src/plugin/excelExport"}]}