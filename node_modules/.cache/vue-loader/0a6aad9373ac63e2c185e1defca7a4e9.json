{"remainingRequest":"E:\\demo\\pikaz-excel-js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\demo\\pikaz-excel-js\\src\\plugin\\excelExport\\excelExport.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\demo\\pikaz-excel-js\\src\\plugin\\excelExport\\excelExport.vue","mtime":1610165480628},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["excelExport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;AAcfile":"excelExport.vue","sourceRoot":"src/plugin/excelExport","sourcesContent":["<!--\r\n * @Author: zouzheng\r\n * @Date: 2020-04-30 11:42:13\r\n * @LastEditors: zouzheng\r\n * @LastEditTime: 2020-08-10 23:10:18\r\n * @Description: 这是excel导出组件（页面）\r\n -->\r\n<template>\r\n  <div class=\"excel-export\" @click=\"!manual&&exportExcel()\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { saveAs } from 'file-saver'\r\nimport XLSX from 'pikaz-xlsx-style'\r\nexport default {\r\n  props: {\r\n    // 文件类型\r\n    bookType: {\r\n      type: String,\r\n      default: 'xlsx'\r\n    },\r\n    // 文件名\r\n    filename: {\r\n      type: String,\r\n      default: 'excel'\r\n    },\r\n    // 是否手动导出\r\n    manual: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    // 表格配置\r\n    sheet: {\r\n      type: Array,\r\n      default: () => {\r\n        return []\r\n      }\r\n    },\r\n    // 处理数据前\r\n    beforeStart: {\r\n      type: Function,\r\n      // bookType:文件类型,filename:文件名,sheet:表格数据\r\n      default: (bookType, filename, sheet) => { }\r\n    },\r\n    // 导出前\r\n    beforeExport: {\r\n      type: Function,\r\n      // filename:文件名,sheet:表格数据,blob:文件流\r\n      default: (bookType, filename, blob) => { }\r\n    },\r\n    // 导出错误\r\n    onError: {\r\n      type: Function,\r\n      // err:错误信息\r\n      default: (err) => { }\r\n    }\r\n  },\r\n  components: {},\r\n  data () {\r\n    return {\r\n      // 默认配置\r\n      default: {\r\n        sheetName: 'sheet',\r\n        globalStyle: {\r\n          border: {\r\n            top: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            },\r\n            bottom: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            },\r\n            left: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            },\r\n            right: {\r\n              style: 'thin',\r\n              color: { rgb: \"000000\" }\r\n            }\r\n          },\r\n          font: {\r\n            name: '宋体',\r\n            sz: 12,\r\n            color: { rgb: \"000000\" },\r\n            bold: false,\r\n            italic: false,\r\n            underline: false,\r\n            shadow: false\r\n          },\r\n          alignment: {\r\n            horizontal: \"center\",\r\n            vertical: \"center\",\r\n            wrapText: false\r\n          },\r\n          fill: {\r\n            fgColor: { rgb: \"ffffff\" },\r\n          }\r\n        },\r\n      },\r\n      // 枚举类\r\n      enum: {\r\n        // 文件类型\r\n        bookType: ['xlsx', 'xls']\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n  },\r\n  mounted () {\r\n  },\r\n  methods: {\r\n    /**\r\n     * @name: 导出excel函数\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    pikaExportExcel () {\r\n      this.$nextTick(() => {\r\n        this.exportExcel()\r\n      })\r\n    },\r\n    /**\r\n     * @name:导出excel \r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    exportExcel () {\r\n      // 处理数据前\r\n      const beforeStart = this.beforeStart(this.bookType, this.filename, this.sheet)\r\n      if (beforeStart === false) {\r\n        return\r\n      }\r\n      if (!this.sheet || this.sheet.length <= 0) {\r\n        this.onError('Table data cannot be empty')\r\n        return\r\n      }\r\n      const wb = this.Workbook()\r\n      this.sheet.forEach((item, index) => {\r\n        let {\r\n          // 标题\r\n          title,\r\n          // 表头\r\n          tHeader,\r\n          // 多级表头\r\n          multiHeader,\r\n          // 表格数据\r\n          table,\r\n          // 合并项\r\n          merges,\r\n          // 数据键值\r\n          keys,\r\n          // 列宽\r\n          colWidth,\r\n          // 表名\r\n          sheetName,\r\n          // 全局样式\r\n          globalStyle,\r\n          // 单元格样式\r\n          cellStyle\r\n        } = item\r\n        sheetName = sheetName || this.default.sheetName\r\n        // 默认全局样式覆盖\r\n        const dgStyle = this.default.globalStyle\r\n        if (globalStyle) {\r\n          Object.keys(dgStyle).forEach(key => {\r\n            globalStyle[key] = { ...dgStyle[key], ...globalStyle[key] }\r\n          })\r\n        } else {\r\n          globalStyle = dgStyle\r\n        }\r\n        // 处理标题格式\r\n        if (title || title === 0 || title === '') {\r\n          // 取表头、多级表头中的最大值\r\n          const tHeaderLength = tHeader && tHeader.length || 0\r\n          const multiHeaderLength = multiHeader && Math.max(...multiHeader.map(m => m.length)) || 0\r\n          const titleLength = Math.max(tHeaderLength, multiHeaderLength, keys.length)\r\n          // 第一个元素为title，剩余以空字符串填充\r\n          title = [title].concat(Array(titleLength - 1).fill(''))\r\n          // 处理标题的合并\\\r\n          const cell=['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\r\n          let mergeSecond='A1'\r\n          if(titleLength>26){\r\n             const one=parseInt(titleLength/26)\r\n             const two=titleLength%26\r\n             mergeSecond=cell[one-1]+cell[two-1]+'1'\r\n          }else{\r\n             mergeSecond = cell[titleLength-1]+'1'\r\n          }\r\n          const titleMerge = `A1:${mergeSecond}`\r\n          if (!merges) {\r\n            merges = [titleMerge]\r\n          } else {\r\n            if (merges.indexOf(titleMerge) === -1) {\r\n              merges.push(titleMerge)\r\n            }\r\n          }\r\n        }\r\n        //表头对应字段\r\n        let data = table.map(v => keys.map(j => v[j]))\r\n        // 多级表头\r\n        if (multiHeader) {\r\n          // 倒序循环\r\n          for (let i = multiHeader.length - 1; i >= 0; i--) {\r\n            data.unshift(multiHeader[i]);\r\n          }\r\n        }\r\n        tHeader && data.unshift(tHeader);\r\n        title && data.unshift(title);\r\n        const ws = this.sheet_from_array_of_arrays(data);\r\n        if (merges && merges.length > 0) {\r\n          if (!ws['!merges']) ws['!merges'] = [];\r\n          merges.forEach(merge => {\r\n            ws['!merges'].push(XLSX.utils.decode_range(merge))\r\n          })\r\n        }\r\n        // 如果没有列宽则自适应\r\n        if (!colWidth) {\r\n          // 基准比例，以12为标准\r\n          const benchmarkRate = globalStyle.font.sz && globalStyle.font.sz / 12 || 1\r\n          // 空字符长度\r\n          const nullstr = 10 * benchmarkRate + 2\r\n          // 单个中文字符长度\r\n          const chinese = 2 * benchmarkRate\r\n          // 单个非中文字符长度\r\n          const nChinese = benchmarkRate\r\n          //设置worksheet每列的最大宽度,并+2调整一点列宽\r\n          const sheetColWidth = data.map(row => row.map(val => {\r\n            //先判断是否为null/undefined\r\n            if (!val) {\r\n              return {\r\n                'wch': nullstr\r\n              };\r\n            } else {\r\n              const strArr = val.toString().split('')\r\n              const pattern = new RegExp(\"[\\u4E00-\\u9FA5]+\")\r\n              let re = strArr.map(str => {\r\n                // 是否为中文\r\n                if (pattern.test(str)) {\r\n                  return chinese\r\n                } else {\r\n                  return nChinese\r\n                }\r\n              })\r\n              re = re.reduce((total, r) => total + r, 0)\r\n              return {\r\n                'wch': re + 2\r\n              };\r\n            }\r\n          }))\r\n          /*以第一行为初始值*/\r\n          let result = sheetColWidth[0];\r\n          for (let i = 1; i < sheetColWidth.length; i++) {\r\n            for (let j = 0; j < sheetColWidth[i].length; j++) {\r\n              if (result[j]['wch'] < sheetColWidth[i][j]['wch']) {\r\n                result[j]['wch'] = sheetColWidth[i][j]['wch'];\r\n              }\r\n            }\r\n          }\r\n          ws['!cols'] = result;\r\n        } else {\r\n          ws['!cols'] = colWidth.map(i => {\r\n            return { wch: i }\r\n          })\r\n        }\r\n\r\n        // 添加工作表\r\n        wb.SheetNames.push(sheetName);\r\n        wb.Sheets[sheetName] = ws;\r\n        let dataInfo = wb.Sheets[wb.SheetNames[index]];\r\n\r\n        //全局样式\r\n        (function () {\r\n          Object.keys(dataInfo).forEach(i => {\r\n            if (i == '!ref' || i == '!merges' || i == '!cols') {\r\n            } else {\r\n              dataInfo[i.toString()].s = globalStyle;\r\n            }\r\n          });\r\n        })();\r\n\r\n        // 单个样式\r\n        (function () {\r\n          if (!cellStyle || cellStyle.length <= 0) {\r\n            return\r\n          }\r\n          cellStyle.forEach(s => {\r\n            const { border, font, alignment, fill } = s;\r\n            dataInfo[s.cell].s = {\r\n              border: border === {} ? border : border || globalStyle.border,\r\n              font: font || globalStyle.font,\r\n              alignment: alignment || globalStyle.alignment,\r\n              fill: fill || globalStyle.fill\r\n            }\r\n          });\r\n        })();\r\n      })\r\n      // 类型默认为xlsx\r\n      let bookType = this.enum.bookType.filter(i => i === this.bookType)[0] || this.enum.bookType[0];\r\n      this.writeExcel(wb, bookType, this.filename)\r\n    },\r\n    /**\r\n     * @name: workbook对象\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    Workbook () {\r\n      class WB {\r\n        constructor() {\r\n          this.SheetNames = [];\r\n          this.Sheets = {};\r\n        }\r\n      }\r\n      return new WB()\r\n    },\r\n    /**\r\n     * @name: 导出excel文件\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    writeExcel (wb, bookType, filename) {\r\n      const wbout = XLSX.write(wb, {\r\n        bookType: bookType,\r\n        bookSST: false,\r\n        type: 'binary'\r\n      });\r\n      const blob = new Blob([this.s2ab(wbout)], {\r\n        type: \"application/octet-stream\"\r\n      })\r\n      const beforeExport = this.beforeExport(blob, bookType, filename)\r\n      if (beforeExport === false) {\r\n        return\r\n      }\r\n      saveAs(blob, `${filename}.${bookType}`);\r\n    },\r\n    /**\r\n     * @name: 转化时间格式\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    datenum (v, date1904) {\r\n      if (date1904) v += 1462;\r\n      const epoch = Date.parse(v);\r\n      return (epoch - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1000);\r\n    },\r\n    /**\r\n     * @name: 设置数据类型\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    sheet_from_array_of_arrays (data, opts) {\r\n      let ws = {};\r\n      const range = {\r\n        s: {\r\n          c: 1000000000,\r\n          r: 1000000000\r\n        },\r\n        e: {\r\n          c: 0,\r\n          r: 0\r\n        }\r\n      };\r\n      for (let R = 0; R != data.length; ++R) {\r\n        for (let C = 0; C != data[R].length; ++C) {\r\n          if (range.s.r > R) range.s.r = R;\r\n          if (range.s.c > C) range.s.c = C;\r\n          if (range.e.r < R) range.e.r = R;\r\n          if (range.e.c < C) range.e.c = C;\r\n          let cell = {\r\n            v: data[R][C]\r\n          };\r\n          if (cell.v == null) continue;\r\n          let cell_ref = XLSX.utils.encode_cell({\r\n            c: C,\r\n            r: R\r\n          });\r\n\r\n          if (typeof cell.v === 'number') cell.t = 'n';\r\n          else if (typeof cell.v === 'boolean') cell.t = 'b';\r\n          else if (cell.v instanceof Date) {\r\n            cell.t = 'n';\r\n            cell.z = XLSX.SSF._table[14];\r\n            cell.v = this.datenum(cell.v);\r\n          } else cell.t = 's';\r\n\r\n          ws[cell_ref] = cell;\r\n        }\r\n      }\r\n      if (range.s.c < 1000000000) ws['!ref'] = XLSX.utils.encode_range(range);\r\n      return ws;\r\n    },\r\n\r\n    /**\r\n     * @name: 转换格式\r\n     * @param {type} \r\n     * @return: \r\n     */\r\n    s2ab (s) {\r\n      const b = new ArrayBuffer(s.length);\r\n      const v = new Uint8Array(b);\r\n      for (let i = 0; i < s.length; i++) {\r\n        v[i] = s.charCodeAt(i) & 0xFF\r\n      }\r\n      return b;\r\n    }\r\n  },\r\n  computed: {},\r\n  watch: {},\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]}]}