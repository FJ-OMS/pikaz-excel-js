{"remainingRequest":"E:\\demo\\pikaz-excel-js\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\demo\\pikaz-excel-js\\src\\plugin\\excelImport\\excelImport.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\demo\\pikaz-excel-js\\src\\plugin\\excelImport\\excelImport.vue","mtime":1610165480628},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\demo\\pikaz-excel-js\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["excelImport.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"excelImport.vue","sourceRoot":"src/plugin/excelImport","sourcesContent":["<!--\r\n * @Author: zouzheng\r\n * @Date: 2020-04-30 15:05:31\r\n * @LastEditors: zouzheng\r\n * @LastEditTime: 2020-10-28 00:47:07\r\n * @Description: 这是excel导入组件（页面）\r\n -->\r\n<template>\r\n    <div\r\n        class=\"excel-import\"\r\n        @click=\"importFileClick\"\r\n    >\r\n        <input\r\n            type=\"file\"\r\n            @change=\"importFile(this)\"\r\n            :id=\"id\"\r\n            style=\"display: none\"\r\n            accept=\".xls,.xlsx\"\r\n        />\r\n        <slot></slot>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport XLSX from \"xlsx\";\r\nexport default {\r\n    props: {\r\n        // 表名\r\n        sheetNames: Array,\r\n        // 是否移除空格\r\n        removeBlankspace: {\r\n            type: Boolean,\r\n            default: false\r\n        },\r\n        // 是否移出特殊字符\r\n        removeSpecialchar: {\r\n            type: Boolean,\r\n            default: true\r\n        },\r\n        //  导入前\r\n        beforeImport: {\r\n            type: Function,\r\n            // file为导入文件\r\n            default: file => {}\r\n        },\r\n        // 导入时\r\n        onProgress: {\r\n            type: Function,\r\n            default: (event, file) => {}\r\n        },\r\n        // 状态改变\r\n        onChange: {\r\n            type: Function,\r\n            default: file => {}\r\n        },\r\n        onSuccess: {\r\n            type: Function,\r\n            // response为生成的json数据\r\n            default: (response, file) => {}\r\n        },\r\n        onError: {\r\n            type: Function,\r\n            // err为错误信息\r\n            default: (err, file) => {}\r\n        }\r\n    },\r\n    components: {},\r\n    data() {\r\n        return {\r\n            imFile: \"\",\r\n            // 枚举类\r\n            enum: {\r\n                // 文件类型\r\n                bookType: [\"xlsx\", \"xls\"]\r\n            },\r\n            id: \"\"\r\n        };\r\n    },\r\n    created() {\r\n        this.id = Math.random().toString();\r\n    },\r\n    mounted() {\r\n        this.imFile = document.getElementById(this.id);\r\n    },\r\n    methods: {\r\n        /**\r\n         * @name: 点击导入按钮\r\n         * @param {type}\r\n         * @return:\r\n         */\r\n        importFileClick() {\r\n            this.imFile.click();\r\n        },\r\n        /**\r\n         * @name: 导入文件\r\n         * @param {type}\r\n         * @return:\r\n         */\r\n        importFile() {\r\n            // 导入excel\r\n            const obj = this.imFile;\r\n            // 无导入文件\r\n            if (!obj.files) {\r\n                this.onError(\"No imported file\");\r\n                return;\r\n            }\r\n            const file = obj.files[0];\r\n            // 导入前\r\n            const beforeImport = this.beforeImport(file);\r\n            this.onChange(file);\r\n            if (beforeImport === false) {\r\n                return;\r\n            }\r\n            // 文件类型必须为xlsx或者xls\r\n            const bookType = file.name.substr(\r\n                file.name.length - 4,\r\n                file.name.length - 1\r\n            );\r\n            const type = this.enum.bookType.some(e => {\r\n                if (bookType.indexOf(e) !== -1) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            if (!type) {\r\n                this.onError('The file type must be \"xlsx\" or \"xls\"', file);\r\n                return;\r\n            }\r\n            const reader = new FileReader();\r\n            const that = this;\r\n            // 导入时\r\n            reader.onprogress = e => {\r\n                this.onProgress(e, file);\r\n            };\r\n            // 导入完成\r\n            reader.onload = e => {\r\n                const data = e.target.result;\r\n                if (that.rABS) {\r\n                    that.wb = XLSX.read(btoa(this.fixdata(data)), {\r\n                        // 手动转化\r\n                        type: \"base64\"\r\n                    });\r\n                } else {\r\n                    that.wb = XLSX.read(data, {\r\n                        type: \"binary\"\r\n                    });\r\n                }\r\n                let json = [];\r\n                // 查询对应表名数据\r\n                if (that.sheetNames) {\r\n                    that.sheetNames.forEach(name => {\r\n                        const sheetIndex = that.wb.SheetNames.findIndex(\r\n                            s => s === name\r\n                        );\r\n                        if (sheetIndex !== -1) {\r\n                            const data = XLSX.utils.sheet_to_json(\r\n                                that.wb.Sheets[that.wb.SheetNames[sheetIndex]]\r\n                            );\r\n                            json.push({ sheetName: name, data });\r\n                        }\r\n                    });\r\n                } else {\r\n                    // 查询全部数据\r\n                    that.wb.SheetNames.forEach(item => {\r\n                        const data = XLSX.utils.sheet_to_json(\r\n                            that.wb.Sheets[item]\r\n                        );\r\n                        json.push({ sheetName: item, data });\r\n                    });\r\n                }\r\n                json = this.dealData(json);\r\n                that.importData(json, file);\r\n            };\r\n            if (this.rABS) {\r\n                reader.readAsArrayBuffer(file);\r\n            } else {\r\n                reader.readAsBinaryString(file);\r\n            }\r\n        },\r\n        /**\r\n         * @name: 处理导入数据\r\n         * @param {type}\r\n         * @return:\r\n         */\r\n        dealData(data) {\r\n            if (this.removeBlankspace || this.removeSpecialchar) {\r\n                const json = data.map(item => {\r\n                    const itemData = item.data.map(i => {\r\n                        Object.keys(i).forEach(key => {\r\n                            if (\r\n                                this.removeBlankspace &&\r\n                                Object.prototype.toString.call(i[key]) ===\r\n                                    \"[object String]\"\r\n                            ) {\r\n                                // 字符串去除空格\r\n                                i[key] = i[key].replace(/\\s*/g, \"\");\r\n                            }\r\n                            // 去除特殊字符\r\n                            if (\r\n                                this.removeSpecialchar &&\r\n                                i[key] &&\r\n                                Object.prototype.toString.call(i[key]) !==\r\n                                    \"[object Boolean]\"\r\n                            ) {\r\n                                i[key] = i[key]\r\n                                    .toString()\r\n                                    .replace(\r\n                                        /[\\u200b-\\u200f\\uFEFF\\u202a-\\u202e]/g,\r\n                                        \"\"\r\n                                    );\r\n                            }\r\n                        });\r\n                        return i;\r\n                    });\r\n                    return { ...item, data: itemData };\r\n                });\r\n                return json;\r\n            }\r\n            return data;\r\n        },\r\n        /**\r\n         * @name: 导入数据\r\n         * @param {type}\r\n         * @return:\r\n         */\r\n        importData(data, file) {\r\n            this.imFile.value = \"\";\r\n            if (data.length <= 0) {\r\n                // 导入失败\r\n                this.onChange(file);\r\n                this.onError(\"The import failed\", file);\r\n                return;\r\n            } else {\r\n                //导入成功\r\n                this.onChange(file);\r\n                this.onSuccess(data, file);\r\n                return;\r\n            }\r\n        },\r\n        /**\r\n         * @name: 文件流转BinaryString\r\n         * @param {type}\r\n         * @return:\r\n         */\r\n        fixdata(data) {\r\n            const o = \"\";\r\n            const l = 0;\r\n            const w = 10240;\r\n            for (; l < data.byteLength / w; ++l) {\r\n                o += String.fromCharCode.apply(\r\n                    null,\r\n                    new Uint8Array(data.slice(l * w, l * w + w))\r\n                );\r\n            }\r\n            o += String.fromCharCode.apply(\r\n                null,\r\n                new Uint8Array(data.slice(l * w))\r\n            );\r\n            return o;\r\n        }\r\n    },\r\n    computed: {},\r\n    watch: {}\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>"]}]}